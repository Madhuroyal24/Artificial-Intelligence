import numpy as np
from queue import PriorityQueue
class PuzzleState:
    def __init__(self, board, moves=0):
        self.board = board
        self.blank_tile = self.find_blank()
        self.moves = moves
    def find_blank(self):
        return tuple(np.argwhere(self.board == 0)[0])
    def is_goal(self):
        return np.array_equal(self.board, np.array([[1, 2, 3], [4, 5, 6], [7, 8, 0]]))
    def get_neighbors(self):
        neighbors = []
        x, y = self.blank_tile
        directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] 
        for dx, dy in directions:
            if 0 <= x + dx < 3 and 0 <= y + dy < 3:
                new_board = self.board.copy()
                new_board[x, y], new_board[x + dx, y + dy] = new_board[x + dx, y + dy], new_board[x, y]
                neighbors.append(PuzzleState(new_board, self.moves + 1))
        return neighbors
def a_star(start):
    open_set = PriorityQueue()
    open_set.put((0, start))
    came_from = {}
    g_score = {str(start.board): 0}
    while not open_set.empty():
        current = open_set.get()[1]  
        if current.is_goal():
            return current.moves
        for neighbor in current.get_neighbors():
            tentative_g_score = g_score[str(current.board)] + 1 
            if str(neighbor.board) not in g_score or tentative_g_score < g_score[str(neighbor.board)]:
                came_from[str(neighbor.board)] = current
                g_score[str(neighbor.board)] = tentative_g_score
                f_score = tentative_g_score + heuristic(neighbor)
                open_set.put((f_score, neighbor)) 
    return -1  # No solution
def heuristic(state):
    return sum(abs((val - 1) // 3 - i) + abs((val - 1) % 3 - j) 
               for i, row in enumerate(state.board) 
               for j, val in enumerate(row) if val)
initial_board = np.array([[1, 2, 3], [4, 0, 5], [7, 8, 6]])
start_state = PuzzleState(initial_board)
solution_moves = a_star(start_state)
print(f"Number of moves to solve the puzzle: {solution_moves}")
