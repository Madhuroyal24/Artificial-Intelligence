import heapq
class Node:
    def __init__(self, name, parent=None, g=0, h=0):
        self.name = name
        self.parent = parent
        self.g = g  
        self.h = h  
        self.f = g + h 
    def __lt__(self, other):
        return self.f < other.f
def heuristic(node, goal):
    # Example heuristic: Manhattan distance (for grid-based pathfinding)
    return abs(node[0] - goal[0]) + abs(node[1] - goal[1])
def a_star(start, goal, graph):
    open_set = []
    closed_set = set()
    start_node = Node(start, None, 0, heuristic(start, goal))
    heapq.heappush(open_set, start_node)
    while open_set:
        current_node = heapq.heappop(open_set)
        if current_node.name == goal:
            path = []
            while current_node:
                path.append(current_node.name)
                current_node = current_node.parent
            return path[::-1]  
        closed_set.add(current_node.name)
        for neighbor in graph[current_node.name]:
            if neighbor in closed_set:
                continue
            g_cost = current_node.g + 1  
            h_cost = heuristic(neighbor, goal)
            neighbor_node = Node(neighbor, current_node, g_cost, h_cost)
            if neighbor_node not in open_set:
                heapq.heappush(open_set, neighbor_node)
    return None  
graph = {
    (0, 0): [(0, 1), (1, 0)],
    (0, 1): [(0, 0), (0, 2)],
    (1, 0): [(0, 0), (1, 1)],
    (0, 2): [(0, 1), (1, 2)],
    (1, 1): [(1, 0), (1, 2)],
    (1, 2): [(0, 2), (1, 1)]
}
start = (0, 0)
goal = (1, 2)
path = a_star(start, goal, graph)
print("Path found:", path)
